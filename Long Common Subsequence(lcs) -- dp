Main algorithm which i learnt that first
**************************
Recursive way dp
#include<bits/stdc++.h>
using namespace std;
//abcd
//bd
int lcs(string x, string y, int i,int j)
{
    int xs = x.size();
    int ys = y.size();
    if(i == xs || j == ys)
        return 0;
    else if(x[i] == y[j])
        return 1 + lcs(x,y,i+1,j+1);
    return max(lcs(x,y,i,j+1),lcs(x,y,i+1,j));

}

int main()
{
    string x, y;
    while(cin >> x>> y)
    {
        cout << "x = " << x.size() << endl;
        cout << "y = " << y.size() << endl;
        cout << "lenth = " << lcs(x,y,0,0) << endl;
    }
    return 0;
}
**************************************
itaretive way dp
#include<bits/stdc++.h>
using namespace std;

int main()
{
//    freopen("input.txt","r",stdin);
//    freopen("output.txt","w",stdout);
    string x, y;
    while(getline(cin,x))
    {
        getline(cin,y);
        char xa[1010], ya[1010];
        int xs = x.size();
        int ys = y.size();
        for(int i = 1; i <= xs; ++i)
            xa[i] = x[i-1];

        for(int i = 1; i <= ys; ++i)
            ya[i] = y[i-1];

        int dp[xs+5][ys+5];
        memset(dp,0,sizeof(dp));
        int get = 0;
        for(int i = 1; i <= xs; ++i)
        {
            for(int j = 1; j <= ys; ++j)
            {
                if(xa[i] == ya[j])
                    dp[i][j] = dp[i-1][j-1] + 1;
                else
                    dp[i][j] = max(dp[i][j-1],dp[i-1][j]);
                get = dp[i][j];
            }
        }
        cout << get << endl;
    }
    return 0;
}


////////////////////////////////////////////////////////
printing common sequence
#include<bits/stdc++.h>
using namespace std;
map < string, bool > mp;
vector < string > an;
int a;
//providence
//president
void lcs(string x, string y, int i,int j,string tmp)
{
    int xs = x.size();
    int ys = y.size();
    if(i == xs || j == ys)
    {
        if((i == xs || j == ys) && !mp[tmp] && !tmp.empty())
        {
            int sz = an.size();
            int tz = tmp.size();
            if(sz == 0)
                an.push_back(tmp);
            else
            {
                sz = an[0].size();
                if(tz > sz)
                {
                    an.clear();
                    an.push_back(tmp);
                }
                else if(tz == sz)
                    an.push_back(tmp);
            }
            mp[tmp] = 1;
        }
        return;
    }

    else if(x[i] == y[j])
    {
        tmp.push_back(x[i]);
        lcs(x,y,i+1,j+1,tmp);
    }
    else
    {
        lcs(x,y,i,j+1,tmp);
        lcs(x,y,i+1,j,tmp);
    }
}

int main()
{
    string x, y;
    while(cin >> x>> y)
    {
        string temp;
        a = 0;
        lcs(x,y,0,0,temp);
        for(int i = 0; i < an.size(); ++i)
            cout << an[i] << " ";
        cout << endl;
        mp.clear();
    }
    return 0;
}
